// <auto-generated />
using System;
using BoardGameGeekLike.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGameGeekLike.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250828131609_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.BoardGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("AvgDuration_minutes")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxPlayersCount")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayersCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RatingsCount")
                        .HasColumnType("int");

                    b.Property<int>("SessionsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("boardgames");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AutoDefeatMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AutoEndMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Duration_minutes")
                        .HasColumnType("double");

                    b.Property<long?>("EndingTime")
                        .HasColumnType("bigint");

                    b.Property<int?>("FirstPlayerIndex")
                        .HasColumnType("int");

                    b.Property<bool?>("FixedMaxLifePointsMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LifeCounterManagerName")
                        .HasColumnType("longtext");

                    b.Property<int?>("LifeCounterTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<int?>("PlayersMaxLifePoints")
                        .HasColumnType("int");

                    b.Property<int?>("PlayersStartingLifePoints")
                        .HasColumnType("int");

                    b.Property<long?>("StartingTime")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LifeCounterTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("LifeCounterManagers");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AutoDefeatMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CurrentLifePoints")
                        .HasColumnType("int");

                    b.Property<bool>("FixedMaxLifePointsMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefeated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LifeCounterManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxLifePoints")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("longtext");

                    b.Property<int?>("StartingLifePoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LifeCounterManagerId");

                    b.ToTable("LifeCounterPlayers");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AutoDefeatMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AutoEndMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("FixedMaxLifePointsMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LifeCounterManagersCount")
                        .HasColumnType("int");

                    b.Property<string>("LifeCounterTemplateName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<int?>("PlayersMaxLifePoints")
                        .HasColumnType("int");

                    b.Property<int?>("PlayersStartingLifePoints")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LifeCounterTemplates");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabBattle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BattlePoints")
                        .HasColumnType("int");

                    b.Property<bool?>("HasPlayerWon")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPlayerTurn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Mab_CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("Mab_NpcId")
                        .HasColumnType("int");

                    b.Property<string>("Results")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Mab_CampaignId");

                    b.HasIndex("Mab_NpcId");

                    b.ToTable("MabBattles");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllCardsCollectedTrophy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllNpcsDefeatedTrophy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CountBoosters")
                        .HasColumnType("int");

                    b.Property<int?>("CountDefeats")
                        .HasColumnType("int");

                    b.Property<int?>("CountMatches")
                        .HasColumnType("int");

                    b.Property<int?>("CountVictories")
                        .HasColumnType("int");

                    b.Property<byte?>("Difficulty")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("GoldStash")
                        .HasColumnType("int");

                    b.Property<double?>("GoldValue")
                        .HasColumnType("double");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PlayerLevel")
                        .HasColumnType("int");

                    b.Property<string>("PlayerNickName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MabCampaigns");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UpperHand")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MabCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabDuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DuelPoints")
                        .HasColumnType("int");

                    b.Property<bool?>("HasPlayerWon")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Mab_BattleId")
                        .HasColumnType("int");

                    b.Property<int?>("NpcCardId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Mab_BattleId");

                    b.ToTable("MabDuels");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabNpc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MabNpcs");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabNpcCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Mab_CardId")
                        .HasColumnType("int");

                    b.Property<int>("Mab_NpcId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Mab_CardId");

                    b.HasIndex("Mab_NpcId");

                    b.ToTable("MabNpcCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerAssignedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Mab_PlayerCardId")
                        .HasColumnType("int");

                    b.Property<int?>("Mab_PlayerDeckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Mab_PlayerCardId");

                    b.HasIndex("Mab_PlayerDeckId");

                    b.ToTable("MabPlayerAssignedCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Mab_CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("Mab_CardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Mab_CampaignId");

                    b.HasIndex("Mab_CardId");

                    b.ToTable("MabPlayerCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Mab_CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Mab_CampaignId");

                    b.ToTable("MabPlayerDecks");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Mechanic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("mechanics");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardGameId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(2,1)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId");

                    b.HasIndex("UserId");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardGameId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Duration_minutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId");

                    b.HasIndex("UserId");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDummy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("SignUpDate")
                        .HasColumnType("date");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BoardGameMechanic", b =>
                {
                    b.Property<int>("BoardGamesId")
                        .HasColumnType("int");

                    b.Property<int>("MechanicsId")
                        .HasColumnType("int");

                    b.HasKey("BoardGamesId", "MechanicsId");

                    b.HasIndex("MechanicsId");

                    b.ToTable("BoardGameMechanic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.BoardGame", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.Category", "Category")
                        .WithMany("BoardGames")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterManager", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.LifeCounterTemplate", "LifeCounterTemplate")
                        .WithMany("LifeCounterManagers")
                        .HasForeignKey("LifeCounterTemplateId");

                    b.HasOne("BoardGameGeekLike.Models.Entities.User", "User")
                        .WithMany("LifeCounterManagers")
                        .HasForeignKey("UserId");

                    b.Navigation("LifeCounterTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterPlayer", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.LifeCounterManager", "LifeCounterManager")
                        .WithMany("LifeCounterPlayers")
                        .HasForeignKey("LifeCounterManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCounterManager");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterTemplate", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.User", "User")
                        .WithMany("LifeCounterTemplates")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabBattle", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabCampaign", "Mab_Campaign")
                        .WithMany("Mab_Battles")
                        .HasForeignKey("Mab_CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.MabNpc", "Mab_Npc")
                        .WithMany()
                        .HasForeignKey("Mab_NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mab_Campaign");

                    b.Navigation("Mab_Npc");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabCampaign", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.User", "User")
                        .WithOne("MabCampaign")
                        .HasForeignKey("BoardGameGeekLike.Models.Entities.MabCampaign", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabDuel", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabBattle", "Mab_Battle")
                        .WithMany("Mab_Duels")
                        .HasForeignKey("Mab_BattleId");

                    b.Navigation("Mab_Battle");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabNpcCard", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabCard", "Mab_Card")
                        .WithMany("Mab_NpcCards")
                        .HasForeignKey("Mab_CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.MabNpc", "Mab_Npc")
                        .WithMany("Mab_NpcCards")
                        .HasForeignKey("Mab_NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mab_Card");

                    b.Navigation("Mab_Npc");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerAssignedCard", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabPlayerCard", "Mab_PlayerCard")
                        .WithMany("Mab_PlayerAssignedCards")
                        .HasForeignKey("Mab_PlayerCardId");

                    b.HasOne("BoardGameGeekLike.Models.Entities.MabPlayerDeck", "Mab_PlayerDeck")
                        .WithMany("Mab_PlayerAssignedCards")
                        .HasForeignKey("Mab_PlayerDeckId");

                    b.Navigation("Mab_PlayerCard");

                    b.Navigation("Mab_PlayerDeck");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerCard", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabCampaign", "Mab_Campaign")
                        .WithMany("Mab_PlayerCards")
                        .HasForeignKey("Mab_CampaignId");

                    b.HasOne("BoardGameGeekLike.Models.Entities.MabCard", "Mab_Card")
                        .WithMany("Mab_PlayerCards")
                        .HasForeignKey("Mab_CardId");

                    b.Navigation("Mab_Campaign");

                    b.Navigation("Mab_Card");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerDeck", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.MabCampaign", "Mab_Campaign")
                        .WithMany("Mab_PlayerDecks")
                        .HasForeignKey("Mab_CampaignId");

                    b.Navigation("Mab_Campaign");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Rating", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.BoardGame", "BoardGame")
                        .WithMany("Ratings")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.Navigation("BoardGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Session", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.BoardGame", "BoardGame")
                        .WithMany("Sessions")
                        .HasForeignKey("BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameMechanic", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.BoardGame", null)
                        .WithMany()
                        .HasForeignKey("BoardGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.Mechanic", null)
                        .WithMany()
                        .HasForeignKey("MechanicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameGeekLike.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoardGameGeekLike.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.BoardGame", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.Category", b =>
                {
                    b.Navigation("BoardGames");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterManager", b =>
                {
                    b.Navigation("LifeCounterPlayers");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.LifeCounterTemplate", b =>
                {
                    b.Navigation("LifeCounterManagers");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabBattle", b =>
                {
                    b.Navigation("Mab_Duels");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabCampaign", b =>
                {
                    b.Navigation("Mab_Battles");

                    b.Navigation("Mab_PlayerCards");

                    b.Navigation("Mab_PlayerDecks");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabCard", b =>
                {
                    b.Navigation("Mab_NpcCards");

                    b.Navigation("Mab_PlayerCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabNpc", b =>
                {
                    b.Navigation("Mab_NpcCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerCard", b =>
                {
                    b.Navigation("Mab_PlayerAssignedCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.MabPlayerDeck", b =>
                {
                    b.Navigation("Mab_PlayerAssignedCards");
                });

            modelBuilder.Entity("BoardGameGeekLike.Models.Entities.User", b =>
                {
                    b.Navigation("LifeCounterManagers");

                    b.Navigation("LifeCounterTemplates");

                    b.Navigation("MabCampaign");

                    b.Navigation("Ratings");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
